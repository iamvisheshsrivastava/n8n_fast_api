{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "path": "csv-merge-by-path",
        "formTitle": "CSV Merge (using server file paths)",
        "formDescription": "Enter two CSV file paths (reachable by the FastAPI server), join columns, and join type.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "file1_path",
              "requiredField": true
            },
            {
              "fieldLabel": "file2_path",
              "requiredField": true
            },
            {
              "fieldLabel": "join_cols",
              "requiredField": true
            },
            {
              "fieldLabel": "join_type",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "inner"
                  },
                  {
                    "option": "left"
                  },
                  {
                    "option": "right"
                  },
                  {
                    "option": "outer"
                  }
                ]
              }
            }
          ]
        },
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "d7253f42-de47-4416-a4de-d3398290df51",
      "name": "Fill path and join details",
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2,
      "position": [
        432,
        144
      ],
      "webhookId": "c8d0dc09-de8e-4c85-9d91-503db21ce01d"
    },
    {
      "parameters": {
        "content": "Node 0 (Merge CSV) → You can connect it to:\n- Node 2 (Download merged CSV)\n- Node 3 (Infer column types)",
        "height": 128
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        656,
        16
      ],
      "id": "80102830-f8e1-435d-8045-9b3d3749e193",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200
        }
      },
      "id": "a1786079-0cd5-4732-a934-61ef490d75db",
      "name": "1a) VIEW CSV",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1024,
        -32
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/inference",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "csv_text",
              "value": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        992,
        256
      ],
      "id": "f970cc1d-7c4f-4fcd-88c5-7071b9087a4e",
      "name": "1b) Inference Column Types"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/LLMCleaning",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "csv_text",
              "value": "={{$json[\"data\"]}}"
            },
            {
              "name": "instruction",
              "value": "remove last 2 columns"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        992,
        528
      ],
      "id": "7c222ecb-8b5f-49f6-b30a-2b7d9d1e5568",
      "name": "1c) LLM Cleaning"
    },
    {
      "parameters": {
        "jsCode": "// Get columns object from inference output\nconst cols = $json[\"columns\"];\n\n// Convert it into an array of {column, type}, plus add a link field\nconst results = Object.entries(cols).map(([name, dtype]) => {\n  return {\n    column: name,\n    inferred_type: dtype,\n    ui_link: \"http://localhost:8501/\"\n  };\n});\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1376,
        256
      ],
      "id": "a6e42ae3-9257-4a07-aabe-1070f780468e",
      "name": "2a) View Column Types"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field with the Streamlit URL\nfor (const item of $input.all()) {\n  item.json.ui_link = \"http://localhost:8501/\";\n}\n\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1376,
        512
      ],
      "id": "15d3436c-4cf8-4696-84c2-e2ad250eeb17",
      "name": "2b) Cleaned Columns Visualization"
    },
    {
      "parameters": {
        "jsCode": "const csvText = $json[\"data\"];  \nconst rows = csvText.trim().split(\"\\n\");\nconst headers = rows[0].split(\",\");\n\nconst results = rows.slice(1).map(r => {\n  const values = r.split(\",\");\n  let obj = {}; \n\n  headers.forEach((h, i) => {\n    obj[h.trim()] = values[i] ? values[i].trim() : null;\n  });\n\n  obj[\"ui_link\"] = \"http://localhost:8501/\";\n  return obj;\n});\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1376,
        768
      ],
      "id": "8a3cfea9-6334-4585-9050-429fcca97623",
      "name": "2c) View Cleaned DataFrame"
    },
    {
      "parameters": {
        "content": "Node 1b (Inference Column Types) → You can connect it to:\n- Node 2a (View Column Types)\n- Node 2b (Cleaned Column Visualization)",
        "width": 224
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1072,
        160
      ],
      "id": "81045627-3314-4cc9-b48d-69b399341292",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "Node 1c (LLM Cleaning) → You can connect it to:\n- Node 2b (Cleaned Columns Visualization)\n- Node 2c (View Cleaned DataFrame)",
        "height": 144,
        "width": 214
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1088,
        448
      ],
      "id": "3504b2fe-ca32-4305-9e87-2ce8cf30e917",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "Node 1d (Manual Cleaning) → You can connect it to:\n- Node 2c (View Cleaned DataFrame)",
        "height": 96,
        "width": 214
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1088,
        752
      ],
      "id": "37ab8d00-03b6-42ae-b137-229d9666a628",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/merge",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "=file1_path",
              "value": "={{$json.file1_path}}"
            },
            {
              "name": "=file2_path",
              "value": "={{$json.file2_path}}"
            },
            {
              "name": "=on",
              "value": "={{$json.join_cols}}"
            },
            {
              "name": "=how",
              "value": "={{$json.join_type}}"
            }
          ]
        },
        "options": {}
      },
      "id": "616fbabf-4ef6-4efc-9997-bbe107e052ad",
      "name": "0) Merge CSV",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        672,
        144
      ],
      "notesInFlow": true,
      "notes": "You can connect this to Node 2 (download) or Node 3 (inference)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/manual_cleaning",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "csv_text",
              "value": "={{$json[\"data\"]}}"
            },
            {
              "name": "impute_missing",
              "value": "true"
            },
            {
              "name": "remove_outliers",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        992,
        832
      ],
      "id": "47fd63bf-e21a-4568-983b-8087611726e7",
      "name": "1d) Manual Cleaning"
    }
  ],
  "pinData": {},
  "connections": {
    "Fill path and join details": {
      "main": [
        [
          {
            "node": "0) Merge CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1a) VIEW CSV": {
      "main": [
        []
      ]
    },
    "1b) Inference Column Types": {
      "main": [
        [
          {
            "node": "2a) View Column Types",
            "type": "main",
            "index": 0
          },
          {
            "node": "2b) Cleaned Columns Visualization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1c) LLM Cleaning": {
      "main": [
        [
          {
            "node": "2c) View Cleaned DataFrame",
            "type": "main",
            "index": 0
          },
          {
            "node": "2b) Cleaned Columns Visualization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2a) View Column Types": {
      "main": [
        []
      ]
    },
    "0) Merge CSV": {
      "main": [
        [
          {
            "node": "1a) VIEW CSV",
            "type": "main",
            "index": 0
          },
          {
            "node": "1c) LLM Cleaning",
            "type": "main",
            "index": 0
          },
          {
            "node": "1b) Inference Column Types",
            "type": "main",
            "index": 0
          },
          {
            "node": "1d) Manual Cleaning",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1d) Manual Cleaning": {
      "main": [
        [
          {
            "node": "2c) View Cleaned DataFrame",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "cf573227-4840-4c2c-b468-1ffb58a2c7d3",
  "meta": {
    "instanceId": "93699de5db8b7c0537b3c7ea464c8dd4cfa1548d72bc381c71cae62767c43595"
  },
  "id": "TwSAxUeq0E0NfIqj",
  "tags": []
}